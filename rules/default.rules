import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Date
import java.text.SimpleDateFormat
import org.joda.time.*
import org.openhab.core.library.types.DecimalType
import java.lang.Math

var Number timeoutCounterPhone

rule "System start"
when 
	System started
then
	sendCommand(Rule_State, ON)
	sendCommand(My_Status, 4)

	sendCommand(Phone_HB, 'away')
	sendCommand(Phone_State, 'idle')
	
	sendCommand(Sunset_Event, OFF)
	sendCommand(Sunrise_Event, OFF)
	
	timeoutCounterPhone = 0
end


rule "Control changed"
when
	Item Rule_State changed
then
	if(Rule_State.state == ON){
		sendCommand(CV_Control, ON)
	}
	if(Rule_State.state == OFF){
		sendCommand(CV_Control, OFF)
	}
end

/*** Mijn eigen state ***/
rule "My_State On"
when
	Item My_Status changed
then
	if(Rule_State.state == ON){
		if(My_Status.state == 4){
			callScript("standby")
			callScript("lights")
		}
		else{
			callScript("lights")
			callScript("standby")
		}
	}
end




rule "Update phone"
when
	Item Network_Smartphone received update
then
	if(Rule_State.state == ON){
		if(Network_Smartphone.state == OFF){
			//no timeout yet
			if(timeoutCounterPhone < 5 && My_Status.state == 4){
				timeoutCounterPhone = timeoutCounterPhone + 1
			}
			if(timeoutCounterPhone > 4 && My_Status.state == 4){
				sendCommand(My_Status, 2) //Away
				callScript("lights")
				callScript("standby")
				sendCommand(Phone_State, 'away')
				sendCommand(Phone_HB, 'away')
			}
		}
		if(Network_Smartphone.state == ON){
			timeoutCounterPhone = 0
		}
	}
end

rule "Update phone"
when
		Item Network_Smartphone changed from OFF to ON
	or
		Item Phone_HB changed to heartbeat
	or
		Item Phone_State changed from away to idle
	or
		Item Phone_State changed from charging to idle
then
	if(Rule_State.state == ON){
		timeoutCounterPhone = 0
		if(!Phone_State.state.toString.matches("charging")){
			sendCommand(My_Status, 4) //Home
		}
	}
end

rule "Phone heartbeat"
when
	Item Phone_HB received update
then
	timeoutCounterPhone = 0
end

rule "Going to bed probably"
when
	Item Phone_State changed to charging
then
	if(Rule_State.state == ON){
		if(now.getHourOfDay > 21 || now.getHourOfDay < 6){ //Only after 21, so 22 or later time to go to bed ;)
			sendCommand(My_Status, 3) //Sleeping
		}
	}
end

rule "Getting out of bed"
when
	Item Phone_State changed from charging to idle
then
	sendCommand(Power_Settopbox, ON)
end
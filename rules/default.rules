import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Date
import java.text.SimpleDateFormat
import org.joda.time.*
import org.openhab.core.library.types.DecimalType

var Number timeoutCounterPhone

rule "System start"
when 
	System started
then
	timeoutCounterPhone = 0
	sendCommand(My_State, ON)
	sendCommand(Network_Smartphone, ON)
	sendCommand(Light_Master, ON)
	sendCommand(Remote_Light, OFF)
	sendCommand(Remote_Me, OFF)
	sendCommand(Remote_XBMC, OFF)
	sendCommand(Remote_XBMCNext, OFF)
	sendCommand(Phone_HB, 'away')
	sendCommand(Phone_State, 'idle')
	sendCommand(XBMC_State, 'idle')
	callScript("standby")
	callScript("lights")
end

/***  Verlichting ***/
rule "licht-aan"
when
		Item Light_Master changed from OFF to ON
	or
		Item Network_Desktop changed from OFF to ON
then 
	callScript("standby")
	callScript("lights")
end

rule "licht-uit"
when
		Item Light_Master changed from ON to OFF
then 
	callScript("lights")
	callScript("standby")
end

rule "Zonsondergang"
when
	Item Sunset_Event received update ON
then
	sendCommand(Light_Master, ON)
	sendCommand(Sunset_Event, OFF)
end

rule "Zonsopkomst"
when
	Item Sunrise_Event received update ON
then
	sendCommand(Light_Master, OFF)
	sendCommand(Sunrise_Event, OFF)
end





/*** Mijn eigen state ***/
rule "My_State On"
when
	Item My_State changed from OFF to ON
then
	callScript("standby")
	callScript("lights")
end

rule "My_State OFF"
when
	Item My_State changed from ON to OFF
then
	callScript("lights")
	callScript("standby")
end

rule "Update phone"
when
	Item Network_Smartphone received update
then
	if(Network_Smartphone.state == OFF){
		//no timeout yet
		if(timeoutCounterPhone < 5 && My_State.state == ON){
			timeoutCounterPhone = timeoutCounterPhone + 1
		}
		if(timeoutCounterPhone > 4 && My_State.state == ON){
			sendCommand(My_State, OFF) 
			callScript("lights")
			callScript("standby")
			sendCommand(Phone_State, 'away')
			sendCommand(Phone_HB, 'away')
			//new
			sendCommand(My_Status, 2) //Away
		}
	}
	if(Network_Smartphone.state == ON){
		timeoutCounterPhone = 0
	}
end

rule "Update phone"
when
		Item Network_Smartphone changed from OFF to ON
	or
		Item Phone_HB changed to heartbeat
	or
		Item Phone_State changed from away to idle
	or
		Item Phone_State changed from charging to idle
then
	timeoutCounterPhone = 0
	if(Phone_State.state != 'charging'){
		sendCommand(My_State, ON)
		//new
		sendCommand(My_Status, 4) //Home
	}
end

rule "Phone heartbeat"
when
	Item Phone_HB received update
then
	timeoutCounterPhone = 0
end

rule "Going to bed probably"
when
	Item Phone_State changed to charging
then
	if(now.getHourOfDay > 21 || now.getHourOfDay < 6){ //Only after 21, so 22 or later time to go to bed ;)
		sendCommand(My_State, OFF) 
		//new
		sendCommand(My_Status, 3) //Sleeping
	}
end





/*** Telefoon ***/
rule "Start call"
when
	Item Phone_State changed to calling
then
	//pause xbmc
	if(AV_Power.state == ON){
		sendCommand(AV_Mute, ON)
	}
	if(XBMC_State.state == 'playing'){
		executeCommandLine("python /home/gerwin/Apps/openhab/extern/xbmc/xbmcPlayPause.py")
	}
end

rule "End call"
when
	Item Phone_State changed from calling to idle
then
	//set XBMC to play again if paused
	if(AV_Power.state == ON){
		sendCommand(AV_Mute, OFF)
	}
	if(XBMC_State.state == 'pause'){
		executeCommandLine("python /home/gerwin/Apps/openhab/extern/xbmc/xbmcPlayPause.py")
	}
end

 
 
 
 
/*** Computer ***/
rule "computer off"
when
	Item Network_Desktop changed from ON to OFF
then
	callScript("standby")
	callScript("lights")
end





/*** Multimedia ***/
rule "XBMC starts playing"
when
	Item XBMC_State changed from idle to playing
then
	//turn on pioneer... With the phone we have pause to playing ;) See what I did there :)
	sendCommand(AV_Source, 15)
	if(AV_Power.state == OFF){
		//power on the pioneer
		sendCommand(AV_Power, ON)
		createTimer(now.plusMillis(6000)) [ |sendCommand(AV_Volume, 45) ]
	}
	if(Media_Subwoofer.state == OFF){
		sendCommand(Media_Subwoofer, ON)
	}
end



rule "Subwoofer aan"
when 
	Item AV_Power changed from OFF to ON
then
	sendCommand(Media_Subwoofer, ON)
end

rule "Subwoofer uit"
when 
	Item AV_Power changed from ON to OFF
then
	sendCommand(Media_Subwoofer, OFF)
end



/*Remote control*/
rule "Gerwin-remote"
when
	Item Remote_Me changed from OFF to ON 
then
	if(My_State.state == OFF){
		sendCommand(My_State, ON)
		//new
		sendCommand(My_Status, 4) //Home
	} 
	else{
		sendCommand(My_State, OFF)
		//new
		sendCommand(My_Status, 2) //Away
	}
	sendCommand(Remote_Me, OFF)
end


rule "Light-remote-aan"
when
	Item Remote_Light changed from OFF to ON 
then
	if(Light_Master.state == OFF){
		sendCommand(Light_Master, ON)
	}
	else{
		sendCommand(Light_Master, OFF)
	}
	sendCommand(Remote_Light, OFF)
end

rule "XBMC-remote-play"
when
	Item Remote_XBMC changed from OFF to ON 
then
	executeCommandLine("python /home/gerwin/Apps/openhab/extern/xbmc/xbmcPlayPause.py")
	createTimer(now.plusMillis(1000)) [ |sendCommand(Remote_XBMC, OFF) ]
end

rule "XBMC-remote-next"
when
	Item Remote_XBMCNext changed from OFF to ON 
then
	executeCommandLine("python /home/gerwin/Apps/openhab/extern/xbmc/xbmcNext.py")
	createTimer(now.plusMillis(1000)) [ |sendCommand(Remote_XBMCNext, OFF) ]
end